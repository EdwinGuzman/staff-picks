<html>
<head>
  <title>react-webpack-boilerplate</title>
  <link href='http://fonts.googleapis.com/css?family=Lato:300,400,700,900,300italic' rel='stylesheet' type='text/css'>
</head>
  <body>
    <div id="header-container"></div>
    
    <div id="hero"></div>
    
    <div id="content">
      <%- body %>
      
      <div id="book-container">
      </div>

    </div>

    <div id="footer-container"></div>

  <script type="text/javascript">
    var staffPicks = <%- staffPicks %>;
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script>
    (function ($) {
    'use strict';
      $(document).ready(function () {
          // For mobile devices: opens/closes the drop down menu.  
          // If the search block is opened, it will close.
          $('.nav-open-button').click(function () {
            $(this).toggleClass('open');
            $('.search-open-button').removeClass('open');
            $('#search-block-form-input').removeClass('open-search');
            $('#search-top').removeClass('open');
            $('#main-nav').toggleClass('open-navigation');
            return false;
          });

          // For mobile devices: opens/closes the search block.  
          // If the drop down menu is opened, it will close.
          $('.search-open-button').click(function () {
            $(this).toggleClass('open');
            $('.nav-open-button').removeClass('open');
            $('#main-nav').removeClass('open-navigation');
            $('#search-block-form-input').toggleClass('open-search');
            $('#search-top').toggleClass('open');
            return false;
          });

          // Non NYPL.org Domain
          $(".login-button").click(function (){
              //$('.sso-login').toggleClass('visible');
              location.href = "https://nypl.bibliocommons.com/user/login";
          });

          // Open/Close Main Navigation
          $('.dropDown').hover(
            function () {
              $(this).addClass('openDropDown');
            },
            function () {
              $(this).removeClass('openDropDown');
            }
          );

        var defaultInputText = 'Find books, music, movies and more',
          defaultInputText2 = 'NYPL events, locations and more',
          header_search = $('#search-top').nypl_search();

        $('#catalog-redirect-form').submit(function () {
          var searchTerm = $(this).find('input#catalog-search-form-input').val(),
            formAction = $(this).attr('action'),
            catalogRedirect = formAction + '?t=smart&q=' + searchTerm +
              '&commit=Search&searchOpt=catalogue';
          window.location = catalogRedirect;
          return false;
        });

        var enews_email = $('#header-news_signup input[type=email]'),
          enews_submit = $('#header-news_signup input[type=submit]');
        
        enews_email.focus(function () {
          $('.newsletter_policy').slideDown();
        });

        enews_email.blur(function () {
          $('.newsletter_policy').slideUp();
        });

        enews_submit.click(function () {
          if (enews_email.val() === '') {
            enews_email.focus();
            return false;
          }
        });



      });
    }) (jQuery);

    (function ($) {
      "use strict";

      var o = {}, methods = {
        init : function (options) {

          // Close open pseudo-select when user clicks outside
          (function (search) {
            $('html').click(function () {
              search.each(function () {
                $(this).find('.pseudo-select')
                  .removeClass('open');
                $(this).find('.error').removeClass('error');
              });
            });
          }(this));

          return this.each(function () {
            var lmnt = $(this),
              mobile_hidden = lmnt.find('.hidden-xs').eq(0);

            o.term = lmnt.find('#search-block-form-input');
            o.search_button = lmnt.find('.search-button');
            o.choices = lmnt.find('.pseudo-select');
            o.mobile_flag = lmnt.find('.hidden-xs').eq(0);
            o.prompt = {
              default_val: o.term.attr("placeholder"),
              catalog: "Search the catalog",
              site: "Search NYPL.org"
            };

            // Don't let clicks get out of the search box
            lmnt.click(function (e) {
              e.stopPropagation();
            });

            // Override default submit, fire search button click event 
            // instead
            lmnt.find('form').submit(function () {
              o.search_button.click();
              return false;
            });

            // Open search scope pane when you click into the
            // search input
            o.term.focus(function (e) {
              o.choices.addClass('open');

              // Add google analytics tracking (Category, Action, Label)
              //ga('send', 'event', 'Header Search', 'Focused', 'Search Box');
            });

            // If the error class has been set on the input box, remove it
            // when the user clicks into it
            o.term.focus(function () {
              methods.clear_error();
            });

            // Setup click action on submit button.
            lmnt.find('.search-button').click(function () {
              return methods.do_search();
            });

            // Setup click action on radio butons
            o.choices.find('li input').click(function () {
              // Track selected radio button (catalog or nypl.org)
              //ga('send', 'event', 'Header Search', 'Select', methods.get_choice());
              methods.set_prompt(this);
            });

            // Setup click action on list items (will be active when items are
            // as buttons on narrow screens
            o.choices.find('li').click(function () {
              if (methods.is_mobile()) {
                if (methods.search_term().length === 0) {
                  methods.set_error();
                } else {
                  methods.do_search(methods.get_choice(this));
                }
              }
            });
          });
        },

        // Set search box placeholder based on selected item
        set_prompt: function (lmnt) {
          var item = $(lmnt).closest('li');
          if (item.hasClass('search-the-catalog')) {
            return o.term.attr('placeholder', o.prompt.catalog);
          }

          if (item.hasClass('search-the-website')) {
            return o.term.attr('placeholder', o.prompt.site);
          }

          return o.term.attr('placeholder', o.prompt.default_val);
        },

        // Get the search term from the input box. Returns '' if the
        // term is undefined
        search_term: function () {
          return $.trim(o.term.val());
        },

        // Set error state in the search input box
        set_error: function (err) {
          if (err === undefined) {
            err = 'Please enter a search term';
          }
          return o.term.addClass('error').attr('placeholder', err);
        },

        // Clear error state in the search input box
        clear_error: function () {
          return o.term.removeClass('error').attr('placeholder', '');
        },

        // The element referred to by mobile_flag should be hidden by
        // a media query. Checking whether or not it is visible will tell
        // us if that mediq query is active
        is_mobile: function () {
          return !o.mobile_flag.is(':visible');
        },

        // Get text of the active search scope selection.
        // choice: optional element to use
        get_choice: function (choice) {
          if (choice === undefined) {
            choice = o.choices.find('input[type=radio]:checked').parent();
          }
          return $.trim($(choice).text()).toLowerCase();
        },

        // Execute the search
        do_search: function (scope) {
          var term = methods.search_term(),
            target;

          if (scope === undefined) {
            scope = methods.get_choice();
          }

          // Don't perform search if no term has been entered
          if (term.length === 0) {
            methods.set_error();

            // Add google analytics tracking for Empty Search
            //ga('send', 'event', 'Header Search', 'Empty Search', '');
            return false;
          }

          if (scope === 'nypl.org') {
            target = 'http://www.nypl.org/search/apachesolr_search/' + term;

            // Add google analytics tracking on submit for NYPL.org
            //ga('send', 'event', 'Header Search', 'Submit Search', term);
          } else {
            // Bibliocommons by default
            target = 'http://nypl.bibliocommons.com/search?t=smart&q='
              + term + '&commit=Search&searchOpt=catalogue';

            // Add google analytics tracking on submit for Catalog Search
            //ga('send', 'event', 'Header Search', 'Submit Catalog Search', term);
          }

          window.location = target;
          return false;
        },

        destroy : function () {}
      };

      $.fn.nypl_search = function (method) {
        if (methods[method]) {
          return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }

        if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        }

        $.error('Method ' +  method + ' does not exist');
      };
    }(jQuery));

    /*jslint devel: false, ass: false, stupid: false, vars: true, indent: 2
    todo: true nomen: true*/
    /*globals jQuery, _gaq, ga, document, window */

    (function ($) {
      "use strict";

      // ## sso_status
      // Manage login related cookies.

      var methods = {
        init: function () {
          return this;
        },

        // ### SSO-related
        // Using BiblioCommons as our Single Sign-On source, a user is logged in
        // if they have a bc_username cookie.

        // Return the username for the logged in user, or `null` if they are not
        // logged in.
        login: function () {
          // return $.cookie('bc_username');
        },

        // Check whether the user is logged in. Return true if they are, false 
        // otherwise.
        logged_in: function () {
          return methods.login() !== undefined && methods.login() !== null;
        },

        // ###??Remember Me??
        // The login form offers a ??remember me?? option. The following function
        // manage cookies related to this.


        // Get or set a remembered username. Without a `name` parameter, return
        // the remembered username, or `null` if the user is not remembered.
        remember: function (name) {
          if (name !== undefined) {
            // return $.cookie('remember_me', name, {expires: 365, path: '/'});
          }
          // return $.cookie('remember_me');
        },

        // Forget the user, i.e. delete the cookie
        forget: function () {
          // return $.removeCookie('remember_me');
        },

        // Check whether the user previously wanted to be remembered. Return
        // `true` or `false`.
        remembered: function () {
          // return $.cookie('remember_me') !== null && $.cookie('remember_me') !== undefined;
        },

        valid_session: function (url) {
          return $.ajax({
            url: url,
            type: "GET",
            dataType: "JSON"
            // beforeSend: function () {
            //   // display gif loader
            // },
            // success: function (data) {
            //   var result = JSON.parse(data);
            //   return result['validSession'] === true ? true : false;
            // },
            // error: function (request, status, error) {
            // }
          });
          // return JSON.parse(data)['validSession'] === true ? true : false;
        }
      };

      $.sso_status = function (method) {

        if (methods[method]) {
          return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }

        if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        }

        $.error('Method ' +  method + ' does not exist');
      };
    }(jQuery));


    (function ($) {
      "use strict";

      // ## sso_details
      // Desc: Manage initialization of login events including remember me functionality

      var methods = {
        // Initialize the widget with set defaults and methods
        init: function (options) {
          var defaults = {
            username: '#username',
            remember_checkbox: '#remember_me',
            login_button: '#login-form-submit'
          },
            settings = $.extend({}, defaults, options);

          if (options === undefined) {
            options = {};
          }

          return this.each(function () {
            $(this).data('sso_details', settings);
            if ($.sso_status('logged_in')) {
              $(this).addClass('logged-in');
            }
            methods.init_form($(settings.username), $(settings.remember_checkbox), $(settings.login_button));

          });
        },

        // Sets the state of login form dependent on sso_status
        // Sets the event handler for logging in
        // GA Tracking on login form submission
        init_form: function (username, checkbox, button) {
          // Check if the remember cookie has been set
          if ($.sso_status('remembered')) {
            username.val($.sso_status('remember')); // Fill in username
            checkbox.attr("checked", true); // Mark the checkbox
          }

          // If the checkbox is unchecked, remove the cookie
          checkbox.click(function () {
            if (!$(this).is(':checked')) {
              $.sso_status('forget');
            }
          });

          // Submit the login form
          button.click(function (e) {
            e.preventDefault();
            // Save Cookie
            if (checkbox.is(':checked')) {
              $.sso_status('remember', username.val());
            }
            // GA event tracker
            if (typeof ga === 'function') {
              ga('send', 'event', 'SSO', 'Log in', 'click');
            }
          });
        },

        // Show the container
        show: function () {
          $(this).addClass('visible');

          // TODO: Next Sprint
          /* if (options !== undefined) {
           if (options.popup === true) {
           if (!form.hasClass('visible')) {
           form.addClass('visible');
           }
           form.addClass('popup');
           
           popup_close.show();
           }
           if (options.message !== undefined) {
           msg.text(options.message);
           }
           } */

        },
        // Hide the container
        hide: function () {
          $(this).removeClass('visible');
        }
      };

      $.fn.sso_details = function (method) {

        if (methods[method]) {
          return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }

        if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        }

        $.error('Method ' +  method + ' does not exist');
      };

    }(jQuery));

    (function ($) {
      "use strict";

      // ### sso_user_button
      // Manages button related events  

      var login,
        logged_in = false,
        defaults = {
          logged_in_menu: '.logged-in-menu',
          login_form: '.login-form',
          mobile: false,
          navBtn: $('.nav-open-button'),
          formClass: ''
        },
        methods = {
          init: function (options) {
            // Extend the default with user options.
            var settings = $.extend({}, defaults, options);
            $(this).data('sso_user_button', settings);

            // login is the username if the user is logged in, or null
            login = $.sso_status('login');
            logged_in = (login !== null && login !== undefined);
            return this.each(function () {
              var lmnt = $(this);

              // Set the button label
              if (logged_in === true) {
                lmnt.find('.label').text(options.label());
                lmnt.addClass('logged-in');
              } else {
                $(this).find('.label').text("Log In");
              }
              lmnt.click(options.click);

              // the mobile nav button should close the login form on mobile
              settings.navBtn.on('click', function () {
                settings.details.sso_details('hide');
              });
              methods.logout('#sso-logout');
            });
          },

          destroy: function () {
            return $(this).each(function () {
              $(this).removeData('sso_user_button');
            });
          },

          // Add GA event handler to the logout link in the logged in menu.
          logout: function (link) {
            $(link).click(function () {
              if (typeof ga === 'function') {
                ga('send', 'event', 'SSO', 'Log out', 'click');
              }
            });
          }
        };

      // To initialize:
      // $('.login-button').sso_user_button({details: details, status: status});
      // where stat = $.sso_status(), details = $('.sso-login').sso_details({status: stat});
      $.fn.sso_user_button = function (method) {

        if (methods[method]) {
          return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }

        if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        }

        $.error('Method ' +  method + ' does not exist');
      };
    }(jQuery));


    // SSO
    jQuery(document).ready(function () {
      'use strict';

      (function ($) {

        var stat = $.sso_status();
        var details = $('.sso-login').sso_details({status: stat}),
          sso_button = $('.login-button').sso_user_button({
            details: details,
            label: function () { return $.sso_status('login'); },
            click: function (e) {
              var details = $(this).data('sso_user_button').details;
              e.preventDefault();
              if (details.hasClass('visible') === true) {
                details.sso_details('hide');
              } else {
                details.sso_details('show');
                if (typeof ga === 'function') {
                  ga('send', 'event', 'SSO', 'Open login form', 'click');
                }
              }
              return false;
            }
          }),
          mobile_button_markup =
            '<li id="mobile-login-element">' +
            '<a class="mobile-login-button" href="" title="Log in"' +
            ' id="sso-logout-mobile"><span class="label">Log in</span></a></li>';

        $('#primary-links > ul').append(mobile_button_markup);
        var mobile_button = $('.mobile-login-button').sso_user_button({
          details: details,
          navBtn: $('.nav-open-button'),
          label: function () { return "Log Out"; },
          click: function (e) {
            var details = $(this).data('sso_user_button').details; 
            e.preventDefault();

            if (!$.sso_status('logged_in')) {
              details.sso_details('show');
              if (typeof ga === 'function') {
                ga('send', 'event', 'SSO', 'Open login form', 'click');
              }
            } else {
              window.location.href = "http://www.nypl.org/bc_sso/logout";
            }
            return false;
          },
          mobile: true
        });

      }(jQuery));
    });

  </script>

  <% if (env.production) { %>
    <script async src="<%= env.assets.main.js %>"></script>
  <% } else { %>
    <script src="http://localhost:3000/client/main.js"></script>
  <% } %>
  </body>
</html>
